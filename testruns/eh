Testing, testing
init'd
Got: Load "/home/izzy/prog/slick/Test.hs"
These be the argHoles:fromList []
Giving: Ok
Got: Search 3 "Either String (IO Int) -> IO (Maybe String)"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1])
length moveSeqs = 6
# distinct move seqs = 6
size gs = 2
Giving: SetInfoWindow "(fmap . fmap) (\\x -> showsPrec  x _ _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequence . eitherToMaybe\n"
Got: Search 3 "Either String Int -> Maybe String"
(Word [(TypeFunctionTyCon Either, [String])] Just Int, [1, 1])
length moveSeqs = 27
# distinct move seqs = 27
size gs = 12
Giving: SetInfoWindow "fmap (show . toEnum) . eitherToMaybe\nfmap ((\\x -> shows  x _) . toEnum) . eitherToMaybe\nfmap (show . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (show . encodeFloat _) . eitherToMaybe\nfmap (\\x -> showsPrec  x _ _) . eitherToMaybe\nfmap (lines . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (readFile . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . encodeFloat _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . toEnum) . eitherToMaybe\nfmap (lex . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (words . (\\x -> showsPrec  x _ _)) . eitherToMaybe\n"
Got: Load "/home/izzy/prog/slick/Test.hs"
These be the argHoles:fromList []
Giving: Ok
Got: Search 3 "Either String (IO Int) -> IO (Maybe String)"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1])
length moveSeqs = 28
# distinct move seqs = 28
size gs = 10
Giving: SetInfoWindow "(fmap . fmap) show . sequenceA . eitherToMaybe\n(fmap . fmap) show . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequence . eitherToMaybe\n"
Got: Load "/home/izzy/prog/slick/Test.hs"
These be the argHoles:fromList []
Giving: Ok
Got: Search 3 "Either String (IO Int) -> IO (Maybe String)"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1, 1])
length moveSeqs = 28
# distinct move seqs = 28
size gs = 10
Giving: SetInfoWindow "(fmap . fmap) show . sequenceA . eitherToMaybe\n(fmap . fmap) show . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequence . eitherToMaybe\n"
Got: Search 3 "Either String (IO Int) -> IO (Maybe String)"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1, 1])
length moveSeqs = 28
# distinct move seqs = 28
size gs = 10
Giving: SetInfoWindow "(fmap . fmap) show . sequenceA . eitherToMaybe\n(fmap . fmap) show . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequence . eitherToMaybe\n"
Got: Search 3 "Either String Int -> Maybe String"
(Word [(TypeFunctionTyCon Either, [String])] Just Int, [1, 1, 1])
length moveSeqs = 252
# distinct move seqs = 252
size gs = 155
Giving: SetInfoWindow "fmap show . eitherToMaybe\nfmap (show . fromEnum) . eitherToMaybe\nfmap (show . even) . eitherToMaybe\nfmap (show . realToFrac) . eitherToMaybe\nfmap (show . toEnum) . eitherToMaybe\nfmap (fmap show . enumFrom) . eitherToMaybe\nfmap (readList . show) . eitherToMaybe\nfmap (show . odd) . eitherToMaybe\nfmap (lex . show) . eitherToMaybe\nfmap (show . toInteger) . eitherToMaybe\nfmap (show . fromIntegral) . eitherToMaybe\nfmap (show . print) . eitherToMaybe\nfmap (show . enumFrom) . eitherToMaybe\nfmap (words . show) . eitherToMaybe\nfmap (fmap show . print) . eitherToMaybe\nfmap (reads . show) . eitherToMaybe\nfmap (lines . show) . eitherToMaybe\nfmap (readFile . show) . eitherToMaybe\nfmap (\\x -> readsPrec  x _) . eitherToMaybe\nfmap (\\x -> shows  x _) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFrom) . eitherToMaybe\nfmap (words . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap words . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (show . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . even) . eitherToMaybe\nfmap (show . ^^ _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . toEnum) . eitherToMaybe\nfmap (fmap readList . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (readList . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap show . divMod _) . eitherToMaybe\nfmap (show . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (fmap reads . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (lines . (\\x -> shows  x _)) . eitherToMaybe\nfmap (unzip . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . show) . eitherToMaybe\nfmap (reads . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap lines . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . quotRem _) . eitherToMaybe\nfmap (fmap show . (\\x -> divMod  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFrom) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFrom) . eitherToMaybe\nfmap ((\\x -> readsPrec  x _) . fromEnum) . eitherToMaybe\nfmap (show . enumFromTo _) . eitherToMaybe\nfmap (head . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (snd . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . enumFromTo _) . eitherToMaybe\nfmap (show . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . fromEnum) . eitherToMaybe\nfmap (fmap show . enumFromThen _) . eitherToMaybe\nfmap (show . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (show . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . realToFrac) . eitherToMaybe\nfmap (show . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (fmap lex . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . fromIntegral) . eitherToMaybe\nfmap (lex . (\\x -> shows  x _)) . eitherToMaybe\nfmap (readsPrec _ . show) . eitherToMaybe\nfmap (show . encodeFloat _) . eitherToMaybe\nfmap (fmap show . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (readFile . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap readFile . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . print) . eitherToMaybe\nfmap (fmap snd . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (show . divMod _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . odd) . eitherToMaybe\nfmap (show . ^ _) . eitherToMaybe\nfmap (show . quotRem _) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . toInteger) . eitherToMaybe\nfmap ((\\x -> shows  x _) . print) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFrom) . eitherToMaybe\nfmap (last . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (\\x -> showsPrec  x _ _) . eitherToMaybe\nfmap (\\x -> showsPrec _ x _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . fromIntegral) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . ^^ _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . print) . eitherToMaybe\nfmap (show . (\\x -> enumFromThenTo _ x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> showsPrec  x _ _) . enumFrom) . eitherToMaybe\nfmap (lines . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec  x _ _) . enumFrom) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromTo _) . eitherToMaybe\nfmap (lines . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (span _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFromThen _) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . fromEnum) . eitherToMaybe\nfmap (show . enumFromThenTo _ _) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo  x _ _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (readList . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (fmap show . enumFromThenTo _ _) . eitherToMaybe\nfmap ((\\x -> readParen  x _ _) . odd) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (foldr1 _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFromTo _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . quotRem _) . eitherToMaybe\nfmap (readFile . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . enumFrom) . eitherToMaybe\nfmap (readList . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (break _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showList  x _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . encodeFloat _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . odd) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFromTo _) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo _ x _)) . eitherToMaybe\nfmap (reads . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . toEnum) . eitherToMaybe\nfmap (words . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap ((\\x -> readParen  x _ _) . even) . eitherToMaybe\nfmap (readParen _ _ . show) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . even) . eitherToMaybe\nfmap ((\\x -> showParen  x _ _) . even) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . realToFrac) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . quotRem _) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> !!  x _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (foldl1 _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (readFile . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (show . (\\x -> enumFromThenTo  x _ _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFromThen _) . eitherToMaybe\nfmap (lex . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . toInteger) . eitherToMaybe\nfmap (zip _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . ^ _) . eitherToMaybe\nfmap (splitAt _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . print) . eitherToMaybe\nfmap (reads . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> showsPrec  x _ _) . fromEnum) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFromTo _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (fmap (readsPrec _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (lex . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (readsPrec _ . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . quotRem _) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . enumFrom) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> showParen  x _ _) . odd) . eitherToMaybe\nfmap (words . (\\x -> showsPrec  x _ _)) . eitherToMaybe\n"
Got: Load "/home/izzy/prog/slick/Test.hs"
These be the argHoles:fromList []
Giving: Ok
Got: Search 3 "Either String (IO Int) -> IO (Maybe String)"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1, 1])
length moveSeqs = 28
# distinct move seqs = 28
size gs = 10
Giving: SetInfoWindow "(fmap . fmap) show . sequenceA . eitherToMaybe\n(fmap . fmap) show . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequence . eitherToMaybe\n"
Got: Search 3 "Either String Int -> Maybe String"
(Word [(TypeFunctionTyCon Either, [String])] Just Int, [1, 1, 1])
length moveSeqs = 252
# distinct move seqs = 252
size gs = 155
Giving: SetInfoWindow "fmap show . eitherToMaybe\nfmap (show . fromEnum) . eitherToMaybe\nfmap (show . even) . eitherToMaybe\nfmap (show . realToFrac) . eitherToMaybe\nfmap (show . toEnum) . eitherToMaybe\nfmap (fmap show . enumFrom) . eitherToMaybe\nfmap (readList . show) . eitherToMaybe\nfmap (show . odd) . eitherToMaybe\nfmap (lex . show) . eitherToMaybe\nfmap (show . toInteger) . eitherToMaybe\nfmap (show . fromIntegral) . eitherToMaybe\nfmap (show . print) . eitherToMaybe\nfmap (show . enumFrom) . eitherToMaybe\nfmap (words . show) . eitherToMaybe\nfmap (fmap show . print) . eitherToMaybe\nfmap (reads . show) . eitherToMaybe\nfmap (lines . show) . eitherToMaybe\nfmap (readFile . show) . eitherToMaybe\nfmap (\\x -> readsPrec  x _) . eitherToMaybe\nfmap (\\x -> shows  x _) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFrom) . eitherToMaybe\nfmap (words . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap words . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (show . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . even) . eitherToMaybe\nfmap (show . ^^ _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . toEnum) . eitherToMaybe\nfmap (fmap readList . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (readList . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap show . divMod _) . eitherToMaybe\nfmap (show . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (fmap reads . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (lines . (\\x -> shows  x _)) . eitherToMaybe\nfmap (unzip . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . show) . eitherToMaybe\nfmap (reads . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap lines . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . quotRem _) . eitherToMaybe\nfmap (fmap show . (\\x -> divMod  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFrom) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFrom) . eitherToMaybe\nfmap ((\\x -> readsPrec  x _) . fromEnum) . eitherToMaybe\nfmap (show . enumFromTo _) . eitherToMaybe\nfmap (head . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (snd . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . enumFromTo _) . eitherToMaybe\nfmap (show . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . fromEnum) . eitherToMaybe\nfmap (fmap show . enumFromThen _) . eitherToMaybe\nfmap (show . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (show . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . realToFrac) . eitherToMaybe\nfmap (show . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (fmap lex . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . fromIntegral) . eitherToMaybe\nfmap (lex . (\\x -> shows  x _)) . eitherToMaybe\nfmap (readsPrec _ . show) . eitherToMaybe\nfmap (show . encodeFloat _) . eitherToMaybe\nfmap (fmap show . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (readFile . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap readFile . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . print) . eitherToMaybe\nfmap (fmap snd . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (show . divMod _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . odd) . eitherToMaybe\nfmap (show . ^ _) . eitherToMaybe\nfmap (show . quotRem _) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . toInteger) . eitherToMaybe\nfmap ((\\x -> shows  x _) . print) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFrom) . eitherToMaybe\nfmap (last . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (\\x -> showsPrec  x _ _) . eitherToMaybe\nfmap (\\x -> showsPrec _ x _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap ((\\x -> readParen  x _ _) . odd) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . fromIntegral) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . ^^ _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . print) . eitherToMaybe\nfmap (show . (\\x -> enumFromThenTo _ x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> showsPrec  x _ _) . enumFrom) . eitherToMaybe\nfmap (lines . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (splitAt _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec  x _ _) . enumFrom) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromTo _) . eitherToMaybe\nfmap (lines . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFromThen _) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . fromEnum) . eitherToMaybe\nfmap (show . enumFromThenTo _ _) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo  x _ _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (readList . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (fmap show . enumFromThenTo _ _) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (foldr1 _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> readParen  x _ _) . even) . eitherToMaybe\nfmap (readParen _ _ . show) . eitherToMaybe\nfmap ((\\x -> shows  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFromTo _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . quotRem _) . eitherToMaybe\nfmap (readFile . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . enumFrom) . eitherToMaybe\nfmap (readList . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (fmap (\\x -> showList  x _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . encodeFloat _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . odd) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFromTo _) . eitherToMaybe\nfmap (span _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo _ x _)) . eitherToMaybe\nfmap (reads . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (zip _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . toEnum) . eitherToMaybe\nfmap (words . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . even) . eitherToMaybe\nfmap ((\\x -> showParen  x _ _) . even) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . realToFrac) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . quotRem _) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (break _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> !!  x _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (foldl1 _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (readFile . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (show . (\\x -> enumFromThenTo  x _ _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFromThen _) . eitherToMaybe\nfmap (lex . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . toInteger) . eitherToMaybe\nfmap ((\\x -> shows  x _) . ^ _) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . print) . eitherToMaybe\nfmap (reads . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> showsPrec  x _ _) . fromEnum) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFromTo _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (fmap (readsPrec _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (lex . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (readsPrec _ . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . quotRem _) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . enumFrom) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> showParen  x _ _) . odd) . eitherToMaybe\nfmap (words . (\\x -> showsPrec  x _ _)) . eitherToMaybe\n"
Got: Load "/home/izzy/prog/slick/Test.hs"
These be the argHoles:fromList []
Giving: Ok
Got: Search 3 "Either String Int -> Maybe String"
(Word [(TypeFunctionTyCon Either, [String])] Just Int, [1, 1, 1])
length moveSeqs = 299
# distinct move seqs = 299
size gs = 175
Giving: SetInfoWindow "fmap show . eitherToMaybe\nfmap (show . fromEnum) . eitherToMaybe\nfmap (show . even) . eitherToMaybe\nfmap (show . realToFrac) . eitherToMaybe\nfmap (show . toEnum) . eitherToMaybe\nfmap (fmap show . enumFrom) . eitherToMaybe\nfmap (readList . show) . eitherToMaybe\nfmap (show . odd) . eitherToMaybe\nfmap (lex . show) . eitherToMaybe\nfmap (show . toInteger) . eitherToMaybe\nfmap (show . fromIntegral) . eitherToMaybe\nfmap (show . print) . eitherToMaybe\nfmap (show . enumFrom) . eitherToMaybe\nfmap (words . show) . eitherToMaybe\nfmap (fmap show . print) . eitherToMaybe\nfmap (reads . show) . eitherToMaybe\nfmap (lines . show) . eitherToMaybe\nfmap (readFile . show) . eitherToMaybe\nfmap (\\x -> readsPrec  x _) . eitherToMaybe\nfmap (\\x -> shows  x _) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFrom) . eitherToMaybe\nfmap (words . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap words . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (show . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . even) . eitherToMaybe\nfmap (show . ^^ _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . toEnum) . eitherToMaybe\nfmap (fmap readList . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (readList . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap show . divMod _) . eitherToMaybe\nfmap (show . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (fmap reads . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (lines . (\\x -> shows  x _)) . eitherToMaybe\nfmap (unzip . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . show) . eitherToMaybe\nfmap (reads . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap lines . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (permutations . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . quotRem _) . eitherToMaybe\nfmap (fmap show . (\\x -> divMod  x _)) . eitherToMaybe\nfmap (subsequences . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFrom) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFrom) . eitherToMaybe\nfmap ((\\x -> readsPrec  x _) . fromEnum) . eitherToMaybe\nfmap (show . enumFromTo _) . eitherToMaybe\nfmap (head . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (snd . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (inits . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . enumFromTo _) . eitherToMaybe\nfmap (show . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . fromEnum) . eitherToMaybe\nfmap (fmap show . enumFromThen _) . eitherToMaybe\nfmap (show . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (show . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . realToFrac) . eitherToMaybe\nfmap (show . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (fmap lex . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . fromIntegral) . eitherToMaybe\nfmap (lex . (\\x -> shows  x _)) . eitherToMaybe\nfmap (readsPrec _ . show) . eitherToMaybe\nfmap (show . encodeFloat _) . eitherToMaybe\nfmap show . find _ . eitherToMaybe\nfmap (tails . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (readFile . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap readFile . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . print) . eitherToMaybe\nfmap (fmap snd . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (show . divMod _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . odd) . eitherToMaybe\nfmap (show . ^ _) . eitherToMaybe\nfmap (show . quotRem _) . eitherToMaybe\nfmap (uncons . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . toInteger) . eitherToMaybe\nfmap ((\\x -> shows  x _) . print) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFrom) . eitherToMaybe\nfmap (last . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (\\x -> showsPrec  x _ _) . eitherToMaybe\nfmap (\\x -> showsPrec _ x _) . eitherToMaybe\nfmap show . findIndex _ . foldMapDefault _\nfmap show . findIndex _ . foldMap _\nfmap show . findIndex _ . foldMapDefault _\nfmap show . findIndex _ . foldMap _\nfmap ((\\x -> shows  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (span _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . fromIntegral) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . ^^ _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . print) . eitherToMaybe\nfmap (show . (\\x -> enumFromThenTo _ x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromThen _) . eitherToMaybe\nfmap (break _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec  x _ _) . enumFrom) . eitherToMaybe\nfmap (lines . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> scaleFloat  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec  x _ _) . enumFrom) . eitherToMaybe\nfmap (find _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (\\x -> shows  x _) . find _ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromTo _) . eitherToMaybe\nfmap (readParen _ _ . show) . eitherToMaybe\nfmap ((\\x -> readParen  x _ _) . even) . eitherToMaybe\nfmap (lines . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFromThen _) . eitherToMaybe\nfmap (zip _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . fromEnum) . eitherToMaybe\nfmap (show . enumFromThenTo _ _) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo  x _ _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (readList . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (fmap show . enumFromThenTo _ _) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (foldr1 _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFromThen _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . enumFromTo _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . quotRem _) . eitherToMaybe\nfmap (readFile . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . enumFrom) . eitherToMaybe\nfmap (readList . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (fmap (\\x -> showList  x _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (partition _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . encodeFloat _) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . odd) . eitherToMaybe\nfmap ((\\x -> showList  x _) . enumFromTo _) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo _ x _)) . eitherToMaybe\nfmap (reads . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (splitAt _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . toEnum) . eitherToMaybe\nfmap (words . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (groupBy _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (genericSplitAt _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . even) . eitherToMaybe\nfmap ((\\x -> showParen  x _ _) . even) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . realToFrac) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . quotRem _) . eitherToMaybe\nfmap (\\x -> readsPrec  x _) . find _ . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . divMod _) . eitherToMaybe\nfmap ((\\x -> showList  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap ((\\x -> !!  x _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (foldl1 _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> quotRem  x _)) . eitherToMaybe\nfmap ((\\x -> genericIndex  x _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap (readFile . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap (maximumBy _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (show . (\\x -> enumFromThenTo  x _ _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFromThen _) . eitherToMaybe\nfmap (lex . (\\x -> showsPrec _ x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . toInteger) . eitherToMaybe\nfmap ((\\x -> shows  x _) . ^ _) . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . print) . eitherToMaybe\nfmap (reads . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap ((\\x -> showsPrec  x _ _) . fromEnum) . eitherToMaybe\nfmap (foldl1' _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . enumFromTo _) . eitherToMaybe\nfmap ((\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . eitherToMaybe\nfmap (fmap (readsPrec _) . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap (lex . (\\x -> showsPrec  x _ _)) . eitherToMaybe\nfmap (readsPrec _ . (\\x -> shows  x _)) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . quotRem _) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . divMod _) . eitherToMaybe\nfmap (minimumBy _ . (\\x -> readsPrec  x _)) . eitherToMaybe\nfmap ((\\x -> showsPrec _ x _) . enumFrom) . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> divMod  x _)) . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . (\\x -> enumFromTo  x _)) . eitherToMaybe\nfmap ((\\x -> showParen  x _ _) . odd) . eitherToMaybe\nfmap ((\\x -> readParen  x _ _) . odd) . eitherToMaybe\nfmap (words . (\\x -> showsPrec  x _ _)) . eitherToMaybe\n"
Got: Search 3 "Either String (IO Int) -> IO (Maybe String)"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1, 1])
length moveSeqs = 28
# distinct move seqs = 28
size gs = 10
Giving: SetInfoWindow "(fmap . fmap) show . sequenceA . eitherToMaybe\n(fmap . fmap) show . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequence . eitherToMaybe\n"
Got: Search 3 "Either String (IO Int) -> IO [String]"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1, 1])
length moveSeqs = 0
# distinct move seqs = 0
size gs = 0
Giving: SetInfoWindow ""
Got: Search 4 "Either String (IO Int) -> IO [String]"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1, 1])
length moveSeqs = 310
# distinct move seqs = 310
size gs = 66
Giving: SetInfoWindow "fmap (lines . show) . sequence_ . eitherToMaybe\nfmap (words . show) . sequence_ . eitherToMaybe\nfmap (fmap show . enumFrom) . sequence_ . eitherToMaybe\nfmap (lines . (\\x -> shows  x _)) . sequence_ . eitherToMaybe\nfmap (words . (\\x -> shows  x _)) . sequence_ . eitherToMaybe\nfmap (concat . fmap (\\x -> readsPrec  x _)) . sequence . eitherToMaybe\nfmap (fmap show . enumFromThen _) . sequence_ . eitherToMaybe\nfmap (fmap show . enumFromTo _) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFrom) . sequence_ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThen  x _)) . sequence_ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromTo  x _)) . sequence_ . eitherToMaybe\nfmap (concat . fmap (\\x -> readsPrec  x _)) . sequenceA . eitherToMaybe\nfmap words . fmap show . maximumBy _ . eitherToMaybe\nfmap words . fmap show . minimumBy _ . eitherToMaybe\nfmap lines . fmap show . maximumBy _ . eitherToMaybe\nfmap words . fmap show . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . foldl1 _ . eitherToMaybe\nfmap lines . fmap show . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . maximumBy _ . eitherToMaybe\nfmap lines . fmap show . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . minimumBy _ . eitherToMaybe\nfmap lines . fmap show . minimumBy _ . eitherToMaybe\nfmap words . fmap show . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . foldr1 _ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo _ x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromTo _) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . enumFrom) . sequence_ . eitherToMaybe\nfmap (lines . (\\x -> showsPrec _ x _)) . sequence_ . eitherToMaybe\nfmap (words . (\\x -> showsPrec _ x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromThen _) . sequence_ . eitherToMaybe\nfmap (fmap show . enumFromThenTo _ _) . sequence_ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo  x _ _)) . sequence_ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . foldl1 _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . maximumBy _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . maximumBy _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . foldl1 _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . foldr1 _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . maximumBy _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . minimumBy _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . foldl1 _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . foldl1 _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . maximumBy _ . eitherToMaybe\n"
Got: Load "/home/izzy/prog/slick/Test.hs"
These be the argHoles:fromList []
Giving: Ok
Got: Search 4 "Either String (IO Int) -> IO [String]"
(Word [(TypeFunctionTyCon Either, [String]),
       (TypeFunctionTyCon IO, [])] Just Int,
 [1, 1, 1])
length moveSeqs = 604
# distinct move seqs = 604
size gs = 121
Giving: SetInfoWindow "fmap (lines . show) . sequence_ . eitherToMaybe\nfmap (words . show) . sequence_ . eitherToMaybe\nfmap (fmap show . enumFrom) . sequence_ . eitherToMaybe\nfmap (fmap show . maybeToList) . sequenceA . eitherToMaybe\nfmap (fmap show . maybeToList) . sequence . eitherToMaybe\n(fmap . fmap) show . sequenceA . maybeToList . eitherToMaybe\n(fmap . fmap) show . sequence . maybeToList . eitherToMaybe\nfmap words . fmap show . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . fromJust . eitherToMaybe\nfmap lines . fmap show . fromJust . eitherToMaybe\nfmap (lines . (\\x -> shows  x _)) . sequence_ . eitherToMaybe\nfmap (words . (\\x -> shows  x _)) . sequence_ . eitherToMaybe\nfmap (concat . fmap (\\x -> readsPrec  x _)) . sequence . eitherToMaybe\nfmap (fmap show . enumFromThen _) . sequence_ . eitherToMaybe\nfmap (fmap show . enumFromTo _) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFrom) . sequence_ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThen  x _)) . sequence_ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromTo  x _)) . sequence_ . eitherToMaybe\nfmap (concat . fmap (\\x -> readsPrec  x _)) . sequenceA . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . maybeToList) . sequence . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . maybeToList) . sequence . eitherToMaybe\nfmap (fmap (\\x -> readsPrec  x _) . maybeToList) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequenceA . maybeToList . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequenceA . maybeToList . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . sequence . maybeToList . eitherToMaybe\n(fmap . fmap) (\\x -> readsPrec  x _) . sequence . maybeToList . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . maybeToList) . sequenceA . eitherToMaybe\nfmap words . fmap show . maximumBy _ . eitherToMaybe\nfmap words . fmap show . minimumBy _ . eitherToMaybe\nfmap lines . fmap show . maximumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . fromJust . eitherToMaybe\nfmap words . fmap show . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . foldl1 _ . eitherToMaybe\nfmap lines . fmap show . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . maximumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . fromJust . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . fromJust . eitherToMaybe\nfmap lines . fmap show . foldr1 _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . minimumBy _ . eitherToMaybe\nfmap lines . fmap show . fromMaybe _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . fromJust . eitherToMaybe\nfmap lines . fmap show . minimumBy _ . eitherToMaybe\nfmap words . fmap show . fromMaybe _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . fromJust . eitherToMaybe\nfmap words . fmap show . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . fromMaybe _ . eitherToMaybe\n(fmap . fmap) show . fmap enumFrom . foldr1 _ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo _ x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromTo  x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromTo _) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . enumFrom) . sequence_ . eitherToMaybe\nfmap (lines . (\\x -> showsPrec _ x _)) . sequence_ . eitherToMaybe\nfmap (words . (\\x -> showsPrec _ x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . (\\x -> enumFromThen  x _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> shows  x _) . enumFromThen _) . sequence_ . eitherToMaybe\nfmap (fmap show . enumFromThenTo _ _) . sequence_ . eitherToMaybe\nfmap (fmap show . (\\x -> enumFromThenTo  x _ _)) . sequence_ . eitherToMaybe\nfmap (fmap (\\x -> showsPrec  x _ _) . maybeToList) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequenceA . maybeToList . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . maybeToList) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequenceA . maybeToList . eitherToMaybe\nfmap (fmap (\\x -> showsPrec  x _ _) . maybeToList) . sequenceA . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . sequence . maybeToList . eitherToMaybe\nfmap (fmap (\\x -> showsPrec _ x _) . maybeToList) . sequence . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . sequence . maybeToList . eitherToMaybe\nfmap words . fmap (\\x -> showsPrec _ x _) . fromJust . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . foldl1 _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap (enumFromThen _) . fromJust . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThenTo _ _) . fromJust . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . maximumBy _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . fromMaybe _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap (\\x -> enumFromTo  x _) . fromJust . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . minimumBy _ . eitherToMaybe\nfmap lines . fmap (\\x -> showsPrec _ x _) . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap (enumFromTo _) . fromJust . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec  x _ _) . fmap enumFrom . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . fromMaybe _ . eitherToMaybe\n(fmap . fmap) (\\x -> showsPrec _ x _) . fmap enumFrom . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . maximumBy _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . maximumBy _ . eitherToMaybe\nfmap lines . fmap (\\x -> showsPrec  x _ _) . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . fromMaybe _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromTo _) . foldl1 _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . foldr1 _ . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . fromMaybe _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThenTo  x _ _) . fromJust . eitherToMaybe\nfmap words . fmap (\\x -> shows  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap (\\x -> enumFromThen  x _) . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . minimumBy _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . foldl1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . maximumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . fromMaybe _ . eitherToMaybe\n(fmap . fmap) snd . fmap (\\x -> readsPrec  x _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . foldl1 _ . eitherToMaybe\nfmap words . fmap (\\x -> showsPrec  x _ _) . fromJust . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . fromMaybe _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . fromMaybe _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . foldr1 _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThenTo _ x _) . fromJust . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromThen  x _) . minimumBy _ . eitherToMaybe\n(fmap . fmap) show . fmap (enumFromThen _) . foldl1 _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . foldr1 _ . eitherToMaybe\n(fmap . fmap) (\\x -> shows  x _) . fmap enumFrom . minimumBy _ . eitherToMaybe\nfmap lines . fmap (\\x -> shows  x _) . fromMaybe _ . eitherToMaybe\n(fmap . fmap) show . fmap (\\x -> enumFromTo  x _) . maximumBy _ . eitherToMaybe\n"
Got: SendStop
Giving: Stop
mote: <stdin>: Data.ByteString.hGetLine: end of file
